{"version":3,"file":"index.vue2.mjs","sources":["../../../../../../packages/preview/supports/video-preview/index.vue"],"sourcesContent":["<script lang='ts' setup>\r\nimport {onBeforeUnmount, onMounted, ref, shallowRef, watch} from 'vue'\r\nimport type {PreviewProps} from '../../preview.interface'\r\nimport {getFileRenderByFile} from '../../utils/utils'\r\n\r\nconst props = withDefaults(\r\n    defineProps<PreviewProps>(),\r\n    {\r\n      url: () => null,\r\n      file: () => null,\r\n    },\r\n)\r\n\r\nconst fileRender = ref(null)\r\nwatch(\r\n    () => props.file,\r\n    (file) => {\r\n      if (file) {\r\n        fileRender.value && URL.revokeObjectURL(fileRender.value)\r\n        getFileRenderByFile(file).then((render) => {\r\n          fileRender.value = render\r\n          // Set the video element src\r\n          videoPreviewRef.value.src = fileRender.value\r\n        })\r\n      }\r\n    },\r\n    {immediate: true},\r\n)\r\nconst videoPreviewRef = shallowRef(null)\r\nonMounted(() => {\r\n  // Listen for video elements loadedmetadata. Event to automatically play the video once it has loaded\r\n  videoPreviewRef.value.addEventListener('loadedmetadata', () => {\r\n    videoPreviewRef.value.play()\r\n  })\r\n})\r\n\r\nonBeforeUnmount(() => {\r\n  // When the component is destroyed. Release the video element src\r\n  videoPreviewRef.value.pause()\r\n  if (props.file) {\r\n    URL.revokeObjectURL(fileRender.value)\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"video-preview web-full-screen\">\r\n    <video ref=\"videoPreviewRef\" class=\"player-video-main\" controls autoplay/>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang='scss'>\r\n.web-full-screen {\r\n  z-index: 9999999;\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100vw !important;\r\n  height: 100vh !important;\r\n  overflow: hidden; /* Hide overflow content. Keep the full screen experience */\r\n  background: rgba(0, 0, 0, 0.8); /* Background color can improve video contrast */\r\n  display: flex; /* Use flexbox to the center video */\r\n  align-items: center; /* Center vertically */\r\n  justify-content: center; /* Center horizontally */\r\n}\r\n\r\n.player-video-main {\r\n  width: 100%;\r\n  height: auto; /* Keep video aspect ratio */\r\n  max-height: 100%; /* Limit the maximum height to prevent overflow */\r\n  object-fit: contain; /* Keep aspect ratio. Black edges may appear */\r\n  transition: .2s;\r\n}\r\n\r\n.player-video-main.video-mirror {\r\n  transform: rotateY(180deg);\r\n}\r\n</style>\r\n"],"names":["props","__props","fileRender","ref","watch","file","getFileRenderByFile","render","videoPreviewRef","shallowRef","onMounted","onBeforeUnmount"],"mappings":";;;;;;;;;;AAKA,UAAMA,IAAQC,GAQRC,IAAaC,EAAI,IAAI;AAC3B,IAAAC;AAAA,MACI,MAAMJ,EAAM;AAAA,MACZ,CAACK,MAAS;AACR,QAAIA,MACFH,EAAW,SAAS,IAAI,gBAAgBA,EAAW,KAAK,GACxDI,EAAoBD,CAAI,EAAE,KAAK,CAACE,MAAW;AACzC,UAAAL,EAAW,QAAQK,GAEnBC,EAAgB,MAAM,MAAMN,EAAW;AAAA,QACzC,CAAC;AAAA,MAEL;AAAA,MACA,EAAC,WAAW,GAAA;AAAA,IAAI;AAEpB,UAAMM,IAAkBC,EAAW,IAAI;AACvC,WAAAC,EAAU,MAAM;AAEd,MAAAF,EAAgB,MAAM,iBAAiB,kBAAkB,MAAM;AAC7D,QAAAA,EAAgB,MAAM,KAAA;AAAA,MACxB,CAAC;AAAA,IACH,CAAC,GAEDG,EAAgB,MAAM;AAEpB,MAAAH,EAAgB,MAAM,MAAA,GAClBR,EAAM,QACR,IAAI,gBAAgBE,EAAW,KAAK;AAAA,IAExC,CAAC;;;;;;;;;;;"}