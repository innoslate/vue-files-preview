{"version":3,"file":"utils.mjs","sources":["../../../../../packages/preview/utils/utils.ts"],"sourcesContent":["import type {FileRenderType, PreviewType} from '../preview.interface'\r\nimport {\r\n    arrayBufferPreviewTypeList,\r\n    getPreviewTypeByFileType,\r\n    imagePreviewTypeList,\r\n    pdfPreviewTypeList,\r\n    textFilePreviewTypeList,\r\n    videoPreviewTypeList,\r\n} from '../preview.const'\r\n\r\n/**\r\n * Get file type\r\n * @param file\r\n */\r\nexport function getFileType(file: File): string {\r\n    const fileName = file.name\r\n    const idx = fileName.lastIndexOf('.')\r\n    return fileName.substring(idx + 1)\r\n}\r\n\r\n/**\r\n * Get file name\r\n * @param file\r\n */\r\nexport function getFileName(file: File): string {\r\n    const fileAllName = file.name\r\n    const idx = fileAllName.lastIndexOf('.')\r\n    return fileAllName.substring(0, idx)\r\n}\r\n\r\n/**\r\n * Get by file type\r\n */\r\nexport function getFileRenderByFile(file: File): Promise<ArrayBuffer | string> {\r\n    const previewType = getPreviewTypeByFileType(getFileType(file))\r\n    const renderType = getFileRenderType(previewType)\r\n    return new Promise((resolve) => {\r\n        const raw = file\r\n        const fileReader = new FileReader()\r\n        switch (renderType) {\r\n            case 'text':\r\n                fileReader.readAsText(raw)\r\n                fileReader.onload = () => {\r\n                    resolve(fileReader.result)\r\n                }\r\n                break\r\n            case 'arrayBuffer':\r\n                fileReader.readAsArrayBuffer(raw)\r\n                fileReader.onload = () => {\r\n                    resolve(fileReader.result)\r\n                }\r\n                break\r\n            case 'image':\r\n                resolve(window.URL.createObjectURL(raw))\r\n                break\r\n            case 'pdf': {\r\n                const pdfBloBlob = new Blob([raw], {type: 'application/pdf'})\r\n                const pdfBlobUrl = URL.createObjectURL(pdfBloBlob)\r\n                resolve(pdfBlobUrl)\r\n                break\r\n            }\r\n            case 'video': {\r\n                const videoBlobUrl = URL.createObjectURL(new Blob([raw], {type: 'video/mp4'}))\r\n                resolve(videoBlobUrl)\r\n                break\r\n            }\r\n            default:\r\n                resolve(window.URL.createObjectURL(raw))\r\n                break\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Get the file rendering data type\r\n * @param previewType\r\n */\r\nexport function getFileRenderType(previewType: PreviewType): FileRenderType {\r\n    const types: Record<FileRenderType, boolean> = {\r\n        text: textFilePreviewTypeList.includes(previewType),\r\n        arrayBuffer: arrayBufferPreviewTypeList.includes(previewType),\r\n        image: imagePreviewTypeList.includes(previewType),\r\n        pdf: pdfPreviewTypeList.includes(previewType),\r\n        video: videoPreviewTypeList.includes(previewType),\r\n    }\r\n    return Object.keys(types)!.find(key => types[key]) as FileRenderType\r\n}\r\n"],"names":["getFileType","file","fileName","idx","getFileName","fileAllName","getFileRenderByFile","previewType","getPreviewTypeByFileType","renderType","getFileRenderType","resolve","raw","fileReader","pdfBloBlob","pdfBlobUrl","videoBlobUrl","types","textFilePreviewTypeList","arrayBufferPreviewTypeList","imagePreviewTypeList","pdfPreviewTypeList","videoPreviewTypeList","key"],"mappings":";AAcO,SAASA,EAAYC,GAAoB;AAC5C,QAAMC,IAAWD,EAAK,MAChBE,IAAMD,EAAS,YAAY,GAAG;AACpC,SAAOA,EAAS,UAAUC,IAAM,CAAC;AACrC;AAMO,SAASC,EAAYH,GAAoB;AAC5C,QAAMI,IAAcJ,EAAK,MACnBE,IAAME,EAAY,YAAY,GAAG;AACvC,SAAOA,EAAY,UAAU,GAAGF,CAAG;AACvC;AAKO,SAASG,EAAoBL,GAA2C;AAC3E,QAAMM,IAAcC,EAAyBR,EAAYC,CAAI,CAAC,GACxDQ,IAAaC,EAAkBH,CAAW;AAChD,SAAO,IAAI,QAAQ,CAACI,MAAY;AAC5B,UAAMC,IAAMX,GACNY,IAAa,IAAI,WAAA;AACvB,YAAQJ,GAAA;AAAA,MACJ,KAAK;AACD,QAAAI,EAAW,WAAWD,CAAG,GACzBC,EAAW,SAAS,MAAM;AACtB,UAAAF,EAAQE,EAAW,MAAM;AAAA,QAC7B;AACA;AAAA,MACJ,KAAK;AACD,QAAAA,EAAW,kBAAkBD,CAAG,GAChCC,EAAW,SAAS,MAAM;AACtB,UAAAF,EAAQE,EAAW,MAAM;AAAA,QAC7B;AACA;AAAA,MACJ,KAAK;AACD,QAAAF,EAAQ,OAAO,IAAI,gBAAgBC,CAAG,CAAC;AACvC;AAAA,MACJ,KAAK,OAAO;AACR,cAAME,IAAa,IAAI,KAAK,CAACF,CAAG,GAAG,EAAC,MAAM,mBAAkB,GACtDG,IAAa,IAAI,gBAAgBD,CAAU;AACjD,QAAAH,EAAQI,CAAU;AAClB;AAAA,MACJ;AAAA,MACA,KAAK,SAAS;AACV,cAAMC,IAAe,IAAI,gBAAgB,IAAI,KAAK,CAACJ,CAAG,GAAG,EAAC,MAAM,YAAA,CAAY,CAAC;AAC7E,QAAAD,EAAQK,CAAY;AACpB;AAAA,MACJ;AAAA,MACA;AACI,QAAAL,EAAQ,OAAO,IAAI,gBAAgBC,CAAG,CAAC;AACvC;AAAA,IAAA;AAAA,EAEZ,CAAC;AACL;AAMO,SAASF,EAAkBH,GAA0C;AACxE,QAAMU,IAAyC;AAAA,IAC3C,MAAMC,EAAwB,SAASX,CAAW;AAAA,IAClD,aAAaY,EAA2B,SAASZ,CAAW;AAAA,IAC5D,OAAOa,EAAqB,SAASb,CAAW;AAAA,IAChD,KAAKc,EAAmB,SAASd,CAAW;AAAA,IAC5C,OAAOe,EAAqB,SAASf,CAAW;AAAA,EAAA;AAEpD,SAAO,OAAO,KAAKU,CAAK,EAAG,KAAK,CAAAM,MAAON,EAAMM,CAAG,CAAC;AACrD;"}