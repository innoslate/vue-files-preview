{"version":3,"file":"index.vue2.js","sources":["../../../../../../packages/preview/supports/md-preview/index.vue"],"sourcesContent":["<script lang='ts' setup>\r\nimport markdownit from 'markdown-it'\r\nimport markdownItFootnote from 'markdown-it-footnote'\r\nimport markdownItContainer from 'markdown-it-container'\r\nimport hljs from 'highlight.js'\r\nimport type {PreviewProps} from '../../preview.interface'\r\nimport {getFileRenderByFile} from '../../utils/utils'\r\n\r\nconst props = withDefaults(\r\n    defineProps<PreviewProps>(),\r\n    {\r\n      url: () => null,\r\n      file: () => null,\r\n    },\r\n)\r\n\r\nconst markdownHtml = ref()\r\n\r\nwatch(\r\n    () => props.file,\r\n    (val) => {\r\n      if (val) {\r\n        const md = markdownit({\r\n          // Enable HTML tags in source\r\n          html: true,\r\n\r\n          // Use '/' to close single tags (<br />).\r\n          // This is only for full CommonMark compatibility.\r\n          xhtmlOut: false,\r\n\r\n          // Convert '\\n' in paragraphs into <br>\r\n          breaks: false,\r\n\r\n          // CSS language prefix for fenced blocks. Can be\r\n          // useful for external highlighters.\r\n          langPrefix: 'language-',\r\n\r\n          // Autoconvert URL-like text to links\r\n          linkify: true,\r\n\r\n          // Enable some language-neutral replacement + quotes beautification\r\n          // For the full list of replacements, see https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs\r\n          typographer: true,\r\n\r\n          // Double + single quotes replacement pairs, when typographer enabled,\r\n          // and smartquotes on. Could be either a String or an Array.\r\n          //\r\n          // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\r\n          // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\r\n          quotes: '“”‘’',\r\n\r\n          // Highlighter function. Should return escaped HTML,\r\n          // or '' if the source string is not changed and should be escaped externally.\r\n          // If result starts with <pre... internal wrapper is skipped.\r\n          highlight(str, lang) {\r\n            if (lang && hljs.getLanguage(lang)) {\r\n              try {\r\n                return `<pre><code class=\"hljs\">${\r\n                    hljs.highlight(str, {language: lang, ignoreIllegals: true}).value\r\n                }</code></pre>`\r\n              } catch (__) {\r\n              }\r\n            }\r\n\r\n            return `<pre><code class=\"hljs\">${md!.utils!.escapeHtml(str)}</code></pre>`\r\n          },\r\n        }).use(markdownItFootnote).use(markdownItContainer)\r\n        getFileRenderByFile(val).then((render) => {\r\n          markdownHtml.value = md.render(render)\r\n        })\r\n      }\r\n    },\r\n    {immediate: true},\r\n)\r\n</script>\r\n\r\n<template>\r\n  <div class=\"md-preview hljs\">\r\n    <div v-html=\"markdownHtml\"/>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang='scss'>\r\n@import 'highlight.js/styles/github-dark-dimmed.css';\r\n@import './index.css';\r\n</style>\r\n"],"names":["props","__props","markdownHtml","ref","watch","val","md","markdownit","str","lang","hljs","markdownItFootnote","markdownItContainer","getFileRenderByFile","render"],"mappings":"seAQA,MAAMA,EAAQC,EAQRC,EAAeC,EAAAA,IAAA,EAErBC,OAAAA,EAAAA,MACI,IAAMJ,EAAM,KACXK,GAAQ,CACP,GAAIA,EAAK,CACP,MAAMC,EAAKC,EAAW,CAEpB,KAAM,GAIN,SAAU,GAGV,OAAQ,GAIR,WAAY,YAGZ,QAAS,GAIT,YAAa,GAOb,OAAQ,OAKR,UAAUC,EAAKC,EAAM,CACnB,GAAIA,GAAQC,EAAK,YAAYD,CAAI,EAC/B,GAAI,CACF,MAAO,2BACHC,EAAK,UAAUF,EAAK,CAAC,SAAUC,EAAM,eAAgB,EAAA,CAAK,EAAE,KAChE,eACF,MAAa,CACb,CAGF,MAAO,2BAA2BH,EAAI,MAAO,WAAWE,CAAG,CAAC,eAC9D,CAAA,CACD,EAAE,IAAIG,CAAkB,EAAE,IAAIC,CAAmB,EAClDC,EAAAA,oBAAoBR,CAAG,EAAE,KAAMS,GAAW,CACxCZ,EAAa,MAAQI,EAAG,OAAOQ,CAAM,CACvC,CAAC,CACH,CACF,EACA,CAAC,UAAW,EAAA,CAAI"}